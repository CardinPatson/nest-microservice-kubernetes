GUARDE utilise le décorateur Injectable et implémente l'interface CanActivate()

Possède une responsabilité unique: 

- Déterminer si une requête donnée sera traité par le gestionnaire de route en fonction des : autoristations, rôles, ACL au moment de l'exécution

Dans les applications express, l'autorisation est souvent géré par un middleware 
Le middleware ne sait pas quel gestionnaire sera exécuté après l'appel de next()

Les guardes ont accès à l'ExecutionContext (Contexte d'Exécution) et savent qui sera éxécuté ensuite

Donc comme les cannaux(pipe) il interpose une logique de traitement durant le cycle requête reponse 

NB : Les guardes sont éxécuté après tous les middleware mais avant les tube(pipe) et les intercepteur

IMPLEMENTATION DUN GARD

auth.guard.ts
---------------
il est de déterminer si la requete continue en verifiant les informations extrait du jeton attaché à l'entête de la requete

import {injectable, CanActivate, ExecutionContext} from "@nestjs/common"
import {Observable} from 'rxjs'

@Injectable()
export class AuthGuard implements CanActivate{
  canActivate(context: ExecutionContext) : boolean | Promise<boolean> | Observable<boolean>{
    const request = context.switchToHttp().getRequest();
    return validateRequest(request)
  }
}
